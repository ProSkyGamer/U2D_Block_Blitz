//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Game/Input/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""a122400b-bc96-4c7f-a695-fd024ba5c548"",
            ""actions"": [
                {
                    ""name"": ""K_MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""dcb47e0c-a4e3-4248-9cd8-dd61cc034cbd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""K_MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""864f89fc-5f8c-40dd-b6f8-1b243cb8aefd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""K_MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""4f0b63b0-2b8d-4322-8a3b-bc4939c74e2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""K_LockFigure"",
                    ""type"": ""Button"",
                    ""id"": ""7bc3aed3-1758-410f-815f-2ce24b01a90b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""K_RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""5bf2a642-05b6-4ef4-a7cd-b34b318cdc04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""K_RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""0b9ab105-6b26-4bf8-a5c6-dc851aad0d84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S_Swipe"",
                    ""type"": ""Button"",
                    ""id"": ""1bb37311-9bdf-4301-ba16-421170bd3216"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S_Position"",
                    ""type"": ""Value"",
                    ""id"": ""17cd4781-5592-4890-9301-cb994d923070"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8a6e0115-2beb-485b-ad76-a32a03f3f4eb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""K_MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ce0fdf7-fb43-472a-ab60-15f179f74626"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""K_MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6f779b1-6e79-45fe-a17d-994f01b5f687"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""K_MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e0d0ead-3e85-4cec-abb4-08b2485df72d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""K_LockFigure"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ec41abf-ecf2-44e5-bfde-3522d88bd2f1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""K_RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d4bc115-5300-40e3-9c96-1eeda699dc0c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""K_RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ddf3b89-e196-4f85-801d-a42abdebbb9b"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""S_Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89a2ca80-6e77-4fab-9ff2-221c4ee06045"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""S_Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_K_MoveLeft = m_Game.FindAction("K_MoveLeft", throwIfNotFound: true);
        m_Game_K_MoveRight = m_Game.FindAction("K_MoveRight", throwIfNotFound: true);
        m_Game_K_MoveDown = m_Game.FindAction("K_MoveDown", throwIfNotFound: true);
        m_Game_K_LockFigure = m_Game.FindAction("K_LockFigure", throwIfNotFound: true);
        m_Game_K_RotateRight = m_Game.FindAction("K_RotateRight", throwIfNotFound: true);
        m_Game_K_RotateLeft = m_Game.FindAction("K_RotateLeft", throwIfNotFound: true);
        m_Game_S_Swipe = m_Game.FindAction("S_Swipe", throwIfNotFound: true);
        m_Game_S_Position = m_Game.FindAction("S_Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_K_MoveLeft;
    private readonly InputAction m_Game_K_MoveRight;
    private readonly InputAction m_Game_K_MoveDown;
    private readonly InputAction m_Game_K_LockFigure;
    private readonly InputAction m_Game_K_RotateRight;
    private readonly InputAction m_Game_K_RotateLeft;
    private readonly InputAction m_Game_S_Swipe;
    private readonly InputAction m_Game_S_Position;
    public struct GameActions
    {
        private @GameInputActions m_Wrapper;
        public GameActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @K_MoveLeft => m_Wrapper.m_Game_K_MoveLeft;
        public InputAction @K_MoveRight => m_Wrapper.m_Game_K_MoveRight;
        public InputAction @K_MoveDown => m_Wrapper.m_Game_K_MoveDown;
        public InputAction @K_LockFigure => m_Wrapper.m_Game_K_LockFigure;
        public InputAction @K_RotateRight => m_Wrapper.m_Game_K_RotateRight;
        public InputAction @K_RotateLeft => m_Wrapper.m_Game_K_RotateLeft;
        public InputAction @S_Swipe => m_Wrapper.m_Game_S_Swipe;
        public InputAction @S_Position => m_Wrapper.m_Game_S_Position;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @K_MoveLeft.started += instance.OnK_MoveLeft;
            @K_MoveLeft.performed += instance.OnK_MoveLeft;
            @K_MoveLeft.canceled += instance.OnK_MoveLeft;
            @K_MoveRight.started += instance.OnK_MoveRight;
            @K_MoveRight.performed += instance.OnK_MoveRight;
            @K_MoveRight.canceled += instance.OnK_MoveRight;
            @K_MoveDown.started += instance.OnK_MoveDown;
            @K_MoveDown.performed += instance.OnK_MoveDown;
            @K_MoveDown.canceled += instance.OnK_MoveDown;
            @K_LockFigure.started += instance.OnK_LockFigure;
            @K_LockFigure.performed += instance.OnK_LockFigure;
            @K_LockFigure.canceled += instance.OnK_LockFigure;
            @K_RotateRight.started += instance.OnK_RotateRight;
            @K_RotateRight.performed += instance.OnK_RotateRight;
            @K_RotateRight.canceled += instance.OnK_RotateRight;
            @K_RotateLeft.started += instance.OnK_RotateLeft;
            @K_RotateLeft.performed += instance.OnK_RotateLeft;
            @K_RotateLeft.canceled += instance.OnK_RotateLeft;
            @S_Swipe.started += instance.OnS_Swipe;
            @S_Swipe.performed += instance.OnS_Swipe;
            @S_Swipe.canceled += instance.OnS_Swipe;
            @S_Position.started += instance.OnS_Position;
            @S_Position.performed += instance.OnS_Position;
            @S_Position.canceled += instance.OnS_Position;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @K_MoveLeft.started -= instance.OnK_MoveLeft;
            @K_MoveLeft.performed -= instance.OnK_MoveLeft;
            @K_MoveLeft.canceled -= instance.OnK_MoveLeft;
            @K_MoveRight.started -= instance.OnK_MoveRight;
            @K_MoveRight.performed -= instance.OnK_MoveRight;
            @K_MoveRight.canceled -= instance.OnK_MoveRight;
            @K_MoveDown.started -= instance.OnK_MoveDown;
            @K_MoveDown.performed -= instance.OnK_MoveDown;
            @K_MoveDown.canceled -= instance.OnK_MoveDown;
            @K_LockFigure.started -= instance.OnK_LockFigure;
            @K_LockFigure.performed -= instance.OnK_LockFigure;
            @K_LockFigure.canceled -= instance.OnK_LockFigure;
            @K_RotateRight.started -= instance.OnK_RotateRight;
            @K_RotateRight.performed -= instance.OnK_RotateRight;
            @K_RotateRight.canceled -= instance.OnK_RotateRight;
            @K_RotateLeft.started -= instance.OnK_RotateLeft;
            @K_RotateLeft.performed -= instance.OnK_RotateLeft;
            @K_RotateLeft.canceled -= instance.OnK_RotateLeft;
            @S_Swipe.started -= instance.OnS_Swipe;
            @S_Swipe.performed -= instance.OnS_Swipe;
            @S_Swipe.canceled -= instance.OnS_Swipe;
            @S_Position.started -= instance.OnS_Position;
            @S_Position.performed -= instance.OnS_Position;
            @S_Position.canceled -= instance.OnS_Position;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnK_MoveLeft(InputAction.CallbackContext context);
        void OnK_MoveRight(InputAction.CallbackContext context);
        void OnK_MoveDown(InputAction.CallbackContext context);
        void OnK_LockFigure(InputAction.CallbackContext context);
        void OnK_RotateRight(InputAction.CallbackContext context);
        void OnK_RotateLeft(InputAction.CallbackContext context);
        void OnS_Swipe(InputAction.CallbackContext context);
        void OnS_Position(InputAction.CallbackContext context);
    }
}
